import { ProviderRpcClient } from 'everscale-inpage-provider';
import { AbstractBlockchainController, IMessage, IMessageContent, IMessageCorruptedContent, IExtraEncryptionStrateryBulk, IExtraEncryptionStrateryEntry, MessageKey, PublicKey, BlockchainControllerFactory, Uint256 } from '@ylide/sdk';
import { MailerContract, RegistryContract } from '../contracts';
import { IEverscaleMessage } from '../misc';
import { GqlSender } from '../misc/GqlSender';
export declare class EverscaleBlockchainController extends AbstractBlockchainController {
    ever: ProviderRpcClient;
    gql: GqlSender;
    readonly everscaleEncryptCore: Promise<import("@ylide/everscale-encrypt").InitOutput>;
    readonly MESSAGES_FETCH_LIMIT = 50;
    readonly mailerContract: MailerContract;
    readonly registryContract: RegistryContract;
    private readonly mainnetEndpoints;
    constructor(options?: {
        dev?: boolean;
        mailerContractAddress?: string;
        registryContractAddress?: string;
        endpoints?: string[];
    });
    getDefaultMailerAddress(): string;
    getRecipientReadingRules(address: Uint256): Promise<any>;
    extractPublicKeyFromAddress(address: string): Promise<PublicKey | null>;
    private _retrieveMessageHistoryByTime;
    private _retrieveMessageHistoryByBounds;
    retrieveMessageHistoryByTime(recipient: Uint256 | null, mailerAddress?: string, fromTimestamp?: number, toTimestamp?: number, limit?: number): Promise<IMessage[]>;
    retrieveMessageHistoryByBounds(recipient: Uint256 | null, mailerAddress?: string, fromMessage?: IMessage, toMessage?: IMessage, limit?: number): Promise<IMessage[]>;
    retrieveBroadcastHistoryByTime(sender: Uint256 | null, mailerAddress?: string, fromTimestamp?: number, toTimestamp?: number, limit?: number): Promise<IMessage[]>;
    retrieveBroadcastHistoryByBounds(sender: Uint256 | null, mailerAddress?: string, fromMessage?: IMessage, toMessage?: IMessage, limit?: number): Promise<IMessage[]>;
    gqlQueryMessages(query: string, variables?: Record<string, any>): Promise<IEverscaleMessage[]>;
    private gqlQuery;
    private convertMsgIdToAddress;
    retrieveAndVerifyMessageContent(msg: IMessage): Promise<IMessageContent | IMessageCorruptedContent | null>;
    retrieveMessageContentByMsgId(msgId: string): Promise<IMessageContent | IMessageCorruptedContent | null>;
    private formatPushMessage;
    isAddressValid(address: string): boolean;
    private queryMessagesList;
    extractNativePublicKeyFromAddress(addressStr: string): Promise<Uint8Array | null>;
    decodeNativeKey(senderPublicKey: Uint8Array, recipientPublicKey: Uint8Array, key: Uint8Array): Promise<Uint8Array>;
    getExtraEncryptionStrategiesFromAddress(address: string): Promise<IExtraEncryptionStrateryEntry[]>;
    getSupportedExtraEncryptionStrategies(): string[];
    prepareExtraEncryptionStrategyBulk(entries: IExtraEncryptionStrateryEntry[]): Promise<IExtraEncryptionStrateryBulk>;
    executeExtraEncryptionStrategy(entries: IExtraEncryptionStrateryEntry[], bulk: IExtraEncryptionStrateryBulk, addedPublicKeyIndex: number | null, messageKey: Uint8Array): Promise<MessageKey[]>;
    addressToUint256(address: string): Uint256;
    uint256ToAddress(value: Uint256, withPrefix?: boolean, nullPrefix?: boolean): string;
    compareMessagesTime(a: IMessage, b: IMessage): number;
}
export declare const everscaleBlockchainFactory: BlockchainControllerFactory;
